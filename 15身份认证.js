// 目前主流的 Web 开发模式有两种，分别是：
// ① 基于服务端渲染的传统 Web 开发模式:服务器发送给客户端的 HTML 页面，是在服务器通过字符串的拼接，动态生成的。因此，客户端不需要使用 Ajax 这样的技术额外请求页面的数据

// 优点：
// ① 前端耗时少。 因为服务器端负责动态生成 HTML 内容，浏览器只需要直接渲染页面即可。尤其是移动端，更省电。
// ② 有利于SEO（搜索引擎优化）。 因为服务器端响应的是完整的 HTML 页面内容，所以爬虫更容易爬取获得信息，更有利于 SEO。
// 缺点：
// ① 占用服务器端资源。 即服务器端完成 HTML 页面内容的拼接，如果请求较多，会对服务器造成一定的访问压力。
// ② 不利于前后端分离，开发效率低。 使用服务器端渲染，则无法进行分工合作，尤其对于前端复杂度高的项目，不利于项目高效开发

// ② 基于前后端分离的新型 Web 开发模式：后端只负责提供 API 接口，前端使用 Ajax 调用接口的开发模式。
// 优点：
// ① 开发体验好。 前端专注于 UI 页面的开发，后端专注于api 的开发，且前端有更多的选择性。
// ② 用户体验好。 Ajax 技术的广泛应用，极大的提高了用户的体验，可以轻松实现页面的局部刷新。
// ③ 减轻了服务器端的渲染压力。 因为页面最终是在每个用户的浏览器中生成的。
// 缺点：
// ① 不利于 SEO。 因为完整的 HTML 页面需要在客户端动态拼接完成，所以爬虫对无法爬取页面的有效信息。（解决方案：利用 Vue、 React 等前端框架的 SSR （server side render）技术能够很好的解决 SEO 问题！）

//① 服务端渲染推荐使用 Session 认证机制
//HTTP 协议的无状态性，指的是客户端的每次 HTTP 请求都是独立的，连续多个请求之间没有直接的关系， 服务器不会主动保留每次 HTTP 请求的状态
// Cookie 是存储在用户浏览器中的一段不超过 4 KB 的字符串。它由一个名称（Name）、一个值（Value）和其它几个用于控制 Cookie 有效期、 安全性、 使用范围的可选属性组成
// 不同域名下的 Cookie 各自独立，每当客户端发起请求时，会自动把当前域名下所有未过期的 Cookie 一同发送到服务器
// Cookie的几大特性：
// ① 自动发送
// ② 域名独立
// ③ 过期时限
// ④ 4KB 限制
/* 客户端第一次请求服务器的时候，服务器通过响应头的形式，向客户端发送一个身份认证的 Cookie，客户端会自动
将 Cookie 保存在浏览器中。随后，当客户端浏览器每次请求服务器的时候，浏览器会自动将身份认证相关的 Cookie， 通过请求头的形式发送给
服务器，服务器即可验明客户端的身份。
由于 Cookie 是存储在浏览器中的，而且浏览器也提供了读写 Cookie 的 API，因此 Cookie 很容易被伪造，不具有安全性。因此不建议服务器将重要的隐私数据，通过 Cookie 的形式发送给浏览器。 */

const session = require('express-session')
const express = require('express')
const app = express()
// 注册中间件
app.use(
  session({
    secret: 'keysecret',
    resave: false,
    saveUninitialized: true
  })
)

// ② 前后端分离推荐使用 JWT 认证机制